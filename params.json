{
  "name": "pyMOR",
  "tagline": "Model Order Reduction with Python",
  "body": "pyMOR - Model Order Reduction with Python\r\n=========================================\r\n\r\npyMOR is a software library for building model order reduction applications\r\nwith the Python programming language.  Its main focus lies on the application\r\nof reduced basis methods to parameterized partial differential equations.  All\r\nalgorithms in pyMOR are formulated in terms of abstract interfaces for seamless\r\nintegration with external high-dimensional PDE solvers. Moreover, pure Python\r\nimplementations of finite element and finite volume discretizations using the\r\nNumPy/SciPy scientific computing stack are provided for getting started\r\nquickly.\r\n\r\n[![Docs](https://readthedocs.org/projects/pymor/badge/?version=latest)](http://pymor.readthedocs.org/en/latest)\r\n[![Docs](https://readthedocs.org/projects/pymor/badge/?version=0.4.x)](http://pymor.readthedocs.org/en/0.3.x)\r\n[![DOI](https://zenodo.org/badge/8838/pymor/pymor.svg)](http://dx.doi.org/10.5281/zenodo.15773)\r\n[![Build Status](https://travis-ci.org/pymor/pymor.png?branch=master)](https://travis-ci.org/pymor/pymor)\r\n[![Coverage Status](https://coveralls.io/repos/pymor/pymor/badge.png)](https://coveralls.io/r/pymor/pymor)\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2013-2016 pyMOR developers and contributors. All rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\r\nfollowing conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following\r\n  disclaimer.\r\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\r\n  disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\r\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\r\nThe following files contain source code originating from other open source software projects:\r\n\r\n* docs/source/pymordocstring.py  (sphinxcontrib-napoleon)\r\n* src/pymor/la/genericsolvers.py (SciPy)\r\n\r\nSee these files for more information.\r\n\r\n\r\nDistribution Packages\r\n---------------------\r\n\r\nPackages for Ubuntu are available via our\r\n[PPA](https://launchpad.net/~pymor/+archive/stable):\r\n\r\n    sudo apt-add-repository ppa:pymor/stable\r\n    sudo apt-get update\r\n    sudo apt-get install python-pymor\r\n\r\nDaily snapshots are available via the \r\n[pymor/daily PPA](https://launchpad.net/~pymor/+archive/daily).\r\n\r\nDemo applications and documentation are packaged separately:\r\n\r\n    sudo apt-get install python-pymor-demos\r\n    sudo apt-get install python-pymor-doc\r\n\r\nThe latter makes a `pymor-demo` script available, which can be used to run\r\nall installed demos.\r\n\r\n\r\nInstallation via pip\r\n--------------------\r\n\r\npyMOR can also easily be installed via the [pip](https://pip.pypa.io/en/stable/)\r\ncommand:\r\n\r\n    pip install [--user] pymor\r\n\r\nThis will install the latest release of pyMOR on your system. If you pass the\r\noptional `--user` argument, pyMOR will only be installed for your local user,\r\nnot requiring administrator privileges. To install the latest development version\r\nof pyMOR, execute\r\n\r\n    pip install [--user] git+https://github.com/pymor/pymor\r\n\r\nwhich will require that the [git](https://git-scm.com/) version control system is\r\ninstalled on your system.\r\n\r\nFrom time to time, the master branch of pyMOR undergoes major changes and things\r\nmight break (this is usually announced on our\r\n[mailing list](http://listserv.uni-muenster.de/mailman/listinfo/pymor-dev)),\r\nso you might prefer to install pyMOR from the current release branch:\r\n\r\n    pip install [--user] git+https://github.com/pymor/pymor@0.4.x\r\n\r\nRelease branches will always stay stable and will only receive bugfix commits\r\nafter the corresponding release has been made.\r\n\r\nNote that pyMOR depends on [Cython](http://www.cython.org/), as well as the\r\n[NumPy](http://numpy.org/) and [SciPy](http://www.scipy.org/) packages.\r\nOn all major Linux distributions, these packages can be easily installed\r\nvia the distribution's package manager. For Debian-based systems (e.g. Ubuntu),\r\nthe following command should work:\r\n\r\n    sudo apt-get install cython python-pip python-numpy python-scipy\r\n\r\nWhen not available on your system, pip will automatically build and\r\ninstall these dependencies. This, however, will in turn require a full C/C++ compiler\r\ntoolchain and header files for several libraries (BLAS, etc.).\r\n\r\nAfter installation of pyMOR, further optional packages will be suggested if\r\nnot already installed.  Some of these ([PySide](http://qt-project.org/wiki/PySide),\r\n[matplotlib](http://matplotlib.org), [pyopengl](http://pyopengl.sourceforge.net/),\r\n[mpi4py](http://mpi4py.scipy.org/)) are again most easily installed\r\nvia your package manager. For Debian-based systems, try:\r\n\r\n    sudo apt-get install python-pyside python-matplotlib python-opengl python-mpi4py\r\n\r\nAgain, all these dependencies can also be installed directly via pip.\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nDocumentation is available online at [Read the Docs](http://pymor.readthedocs.org/)\r\nor offline in the `python-pymor-doc` package.\r\n\r\nTo build the documentation yourself, execute\r\n\r\n    make doc\r\n    \r\ninside the root directory of the pyMOR source tree. This will generate HTML\r\ndocumentation in `docs/_build/html`.\r\n\r\n\r\nExternal PDE solvers\r\n--------------------\r\n\r\npyMOR has been designed with easy integration of external PDE solvers\r\nin mind.\r\n\r\nA basic approach is to use the solver only to generate high-dimensional\r\nsystem matrices which are then read by pyMOR from disk (`pymor.discretizers.disk`).\r\nAnother possibility is to steer the solver via an appropriate network\r\nprotocol. \r\n\r\nWhenever possible, we recommend to recompile the solver as a \r\nPython extension module which gives pyMOR direct access to the solver without \r\nany communication overhead. A basic example using \r\n[pybindgen](https://github.com/gjcarneiro/pybindgen) can be found in \r\n`src/pymordemos/minimal_cpp_demo`. A more elaborate nonlinear example\r\nusing [Boost.Python](http://www.boost.org/) can be found\r\n[here](https://github.com/pymor/dune-burgers-demo). Moreover,\r\nwe provide bindings for the following solver libraries:\r\n\r\n* [FEniCS](http://fenicsproject.org)\r\n\r\n    MPI-compatible wrapper classes for dolfin linear algebra data structures are\r\n    shipped with pyMOR (`pymor.vectorarrays.fenics`, `pymor.operators.fenics`).\r\n    For an example see `pymordemos.thermalbock`, `pymordemos.thermalblock_simple`.\r\n\r\n* [deal.II](https://dealii.org)\r\n\r\n    Python bindings and pyMOR wrapper classes can be found\r\n    [here](https://github.com/pymor/pymor-deal.II).\r\n\r\n* [DUNE](https://www.dune-project.org)\r\n\r\n    [dune-pymor](https://github.com/pymor/dune-pymor) automatically wraps\r\n    [dune-hdd](https://users.dune-project.org/projects/dune-hdd/wiki) discretizations\r\n    for use with pyMOR.\r\n\r\nDo not hesitate to contact\r\n[us](http://listserv.uni-muenster.de/mailman/listinfo/pymor-dev) if you\r\nneed help with the integration of your PDE solver.\r\n\r\n\r\nSetting up an Environment for pyMOR Development\r\n-----------------------------------------------\r\n\r\nFirst make sure that all dependencies are installed. This can be easily\r\nachieved by first installing pyMOR with its dependencies as described\r\nabove. Then uninstall the pyMOR package itself, e.g.\r\n\r\n    sudo apt-get uninstall python-pymor\r\n\r\nor\r\n\r\n    pip uninstall pyMOR\r\n\r\nThen, clone the pyMOR git repository using\r\n\r\n    git clone https://github.com/pymor/pymor $PYMOR_SOURCE_DIR\r\n    cd $PYMOR_SOURCE_DIR\r\n\r\nand, optionally, switch to the branch you are interested in, e.g.\r\n\r\n    git checkout 0.4.x\r\n\r\nThen, add pyMOR to the search path of your Python interpreter, either by\r\nsetting PYTHONPATH\r\n\r\n    export PYTHONPATH=$PYMOR_SOURCE_DIR/src:$PYTHONPATH\r\n\r\nor by using a .pth file:\r\n\r\n    echo \"$PYMOR_SOURCE_DIR/src\" > $PYTHON_ROOT/lib/python2.7/site-packages/pymor.pth\r\n\r\nHere, PYTHON_ROOT is either '/usr', '$HOME/.local' or the root of your\r\n[virtual environment](http://www.virtualenv.org/). Finally, build the Cython\r\nextension modules as described in the next section.\r\n\r\n\r\nCython extension modules\r\n------------------------\r\n\r\npyMOR uses [Cython](http://www.cython.org/) extension modules to speed up\r\nnumerical algorithms which cannot be efficiently expressed using NumPy idioms.\r\nThe source files of these modules (files with extension `.pyx`) have to be\r\nprocessed by Cython into a `.c`-file which then must be compiled into a shared\r\nobject (`.so` file). The whole build process is handeled automatically by\r\n`setup.py`.\r\n\r\nIf you want to develop Cython extensions modules for pyMOR yourself, you should\r\nadd your module to the `ext_modules` list defined in the `_setup` method of\r\n`setup.py`. Calling\r\n\r\n    python setup.py build_ext --inplace\r\n\r\nwill then build the extension module and place it into your pyMOR source tree.\r\n\r\n\r\nTests\r\n-----\r\n\r\npyMOR uses [pytest](http://pytest.org/) for unit testing. To run the test suite,\r\nsimply execute `make test` in the base directory of the pyMOR repository. This\r\nwill also create a test coverage report which can be found in the `htmlcov`\r\ndirectory. Alternatively, you can run `make full-test` which will also enable\r\n[pyflakes](https://pypi.python.org/pypi/pyflakes) and\r\n[pep8](http://www.python.org/dev/peps/pep-0008/) checks.\r\n\r\nAll tests are contained within the `src/pymortests` directory and can be run\r\nindividually by executing `py.test src/pymortests/the_module.py`.\r\n\r\n\r\nContact\r\n-------\r\n\r\nShould you have any questions regarding pyMOR or wish to contribute, \r\ndo not hestitate to contact us via our development mailing list:\r\n\r\n<http://listserv.uni-muenster.de/mailman/listinfo/pymor-dev>\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}