{"name":"pyMOR","tagline":"Model Order Reduction with python","body":"pyMOR - Model Order Reduction with python\r\n=======================================\r\n\r\n**NOTE** pyMOR is still alpha quality software and under heavy development.\r\nShould you have any questions regarding pyMOR or wish to contribute, do not\r\nhesitate to directly contact one of the developers.\r\n\r\n[![Build Status](https://travis-ci.org/pymor/pymor.png?branch=master)](https://travis-ci.org/pymor/pymor)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nWe recommend the following way to install pyMOR with all its dependencies.\r\n\r\nThis procedure has been tested on the following platforms:\r\n\r\n    Ubuntu 12.04, Ubuntu 13.04, Arch Linux\r\n\r\n\r\n1.  Open a terminal and make sure you have git and python installed on your\r\n    computer. (On Debian based linux distributions (e.g. Ubunutu) use `sudo\r\n    apt-get install git python2.7` to install both git and python.)\r\n\r\n2.  Clone the pyMOR main repository using\r\n    \r\n        git clone https://github.com/pymor/pymor.git\r\n    \r\n    This will create a directory named `pymor` in your current working directory.\r\n    Change into this directory using\r\n    \r\n        cd pymor\r\n\r\n3.  Excecute the provided installation script\r\n    \r\n        ./install.py\r\n    \r\n    The installation script will ensure that all necessary system libraries and\r\n    development headers are installed, create a new python virtual environment\r\n    (virtualenv, see www.virtualenv.org), install all necessary python packages into\r\n    this virtualenv, and finally install pyMOR itself.\r\n    \r\n    The installation process can be customized using various command-line arguments.\r\n    (See `./install.py --help`.) Most notable, the path of the virtualenv can be\r\n    configured using the `--virtualenv-dir` option.  Moreover, if you intend to work\r\n    directly inside the pyMOR source tree, use\r\n    \r\n        ./install.py --only-deps\r\n    \r\n    to prevent the installation of pyMOR itself into the `site-packages` directory\r\n    of the virtualenv. In this case, the installation script will add the pyMOR\r\n    source tree to the `PYTHONPATH` of the virtualenv, so pyMOR will always be\r\n    importable inside the virtualenv. (This can be prevented by adding the\r\n    `--without-python-path` option.) Moreover\r\n    \r\n        python setup.py build_ext --inplace\r\n    \r\n    will be automatically called, to build pyMOR's Cython extensions modules.\r\n   \r\n4.  Activate the new virtualenv. If you did not change the default path of the\r\n    virtualenv, this can be done by executing\r\n    \r\n        source $HOME/virtualenv/pymor/bin/activate\r\n    \r\n5.  Try out one of the provided demos, e.g. call\r\n    \r\n        cd src/pymor/demos\r\n        ./thermalblock.py -ep --plot-solutions 2 2 3 16\r\n\r\n\r\nCython extension modules\r\n------------------------\r\n\r\npyMOR uses [Cython](http://www.cython.org/) extension modules to speed up\r\nnumerical algorithms which cannot be efficiently expressed using NumPy idioms.\r\nTo benefit from these optimizations, the modules' source files (currently\r\n`pymor/tools/inplace.pyx` and `pymor/tools/realations.pyx`) have to be processed\r\nby Cython into a `.c`-file which then must be compiled into a shared object.\r\nThese `.so`-files then take precedence over the non-optimized pure python\r\nmodules.  This whole build process is handeled automatically by `setup.py`\r\nwhich is internally called by the `install.py` script.  \r\n\r\nIf you want to develop Cython extensions modules for pyMOR yourself, you should\r\nadd your module to the `ext_modules` list defined in the `_setup` method of\r\n`setup.py`. Calling\r\n\r\n    python setup.py build_ext --inplace\r\n\r\nwill then build the extension module and place it into your pyMOR source tree.\r\n\r\n\r\nDebugging\r\n---------\r\n\r\n * You can globally disable caching by having `PYMOR_CACHE_DISABLE=1` in the process' environment\r\n\r\n\r\nTests\r\n-----\r\n\r\npyMOR uses [pytest](http://pytest.org/) for unit testing. To run the test suite,\r\nsimply execute `make test` in the base directory of the pyMOR repository. This\r\nwill also create a test coverage report which can be found in the `htmlcov`\r\ndirectory. Alternatively, you can run `make full-test` which will also enable\r\n[pyflakes](https://pypi.python.org/pypi/pyflakes) and\r\n[pep8](http://www.python.org/dev/peps/pep-0008/) checks.\r\n\r\nAll tests are contained within the `src/pymortests` directory and can be run\r\nindividually by executing `py.test src/pymortests/the_module.py`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}